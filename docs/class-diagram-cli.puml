@startuml OTOBO CLI and Setup Architecture


title OTOBO/Znuny Python Client - CLI and Setup Components

package "CLI Interface" <<Rectangle>> {
    class OtoboCommandRunner {
        + prefix: list[str]
        + executable: str
        + log_commands: bool

        + from_docker(container, console_path): OtoboCommandRunner
        + from_local(console_path): OtoboCommandRunner
        + run(operation, args): CmdResult
    }

    class OtoboConsole {
        + runner: OtoboCommandRunner
        + no_ansi_default: bool
        + quiet_default: bool

        + add_user(user_name, first_name, ...): CmdResult
        + add_group(name, comment): CmdResult
        + link_user_to_group(user_name, group_name, permission): CmdResult
        + add_queue(name, group, ...): CmdResult
        + add_webservice(name, source_path): CmdResult
    }

    class ArgsBuilder {
        - _parts: list[str]

        + opt(name, value): ArgsBuilder
        + opt_if(name, value): ArgsBuilder
        + flag(name, enabled): ArgsBuilder
        + repeat(name, values): ArgsBuilder
        + to_list(): list[str]
    }

    class CmdResult {
        + ok: bool
        + code: int
        + out: str
        + err: str
    }
}

package "Setup and Bootstrap" <<Rectangle>> {
    class SystemEnvironment {
        + console_path: Path
        + webservices_dir: Path

        + build_command_runner(): OtoboCommandRunner
    }

    class DockerEnvironment {
        + container_name: str
        + console_path: str
        + webservices_dir: Path

        + build_command_runner(): OtoboCommandRunner
    }

    class SetupConfig {
        + webservice_name: str
        + webservice_password: str
        + webservice_description: str
        + enabled_operations: list[TicketOperation]
        + group_name: str
        + user_name: str
        + user_password: str
        + queue_name: str
    }

    class "setup_otobo_system()" as setup_function {
        + setup_otobo_system(env, config): void
    }
}

package "Webservice Builder" <<Rectangle>> {
    class WebserviceBuilder {
        - _name: str
        - _framework_version: str
        - _operation_specs: dict
        - _enabled_operations: list[TicketOperation]
        - _restricted_user: str | None

        + set_name(name): WebserviceBuilder
        + set_framework_version(version): WebserviceBuilder
        + set_restricted_by(username): WebserviceBuilder
        + enable_operation(operation): WebserviceBuilder
        + build(): dict
        + dump_yaml(config): str
        + save_to_file(config, output_path): void
    }

    class OperationSpec {
        + operation_name: str
        + op: TicketOperation
        + route: str
        + description: str
        + methods: list[str]
        + include_ticket_data: str
    }
}

package "Utilities" <<Rectangle>> {
    class "generate_enabled_operations_list()" as ops_util {
        + generate_enabled_operations_list(enabled_operations): list[TicketOperation]
    }
}

package "Domain Models (ref)" <<Rectangle>> {
    enum TicketOperation {
        CREATE
        SEARCH
        GET
        UPDATE
    }

    class ClientConfig {
        + base_url: str
        + webservice_name: str
        + operation_url_map: OperationUrlMap
    }
}

' CLI relationships
OtoboConsole *-- OtoboCommandRunner : uses
OtoboConsole ..> ArgsBuilder : builds args with
OtoboCommandRunner ..> CmdResult : returns
OtoboConsole ..> CmdResult : returns

' Setup relationships
SystemEnvironment ..> OtoboCommandRunner : creates
DockerEnvironment ..> OtoboCommandRunner : creates
setup_function ..> SystemEnvironment : uses
setup_function ..> DockerEnvironment : uses
setup_function *-- SetupConfig : configured by
setup_function ..> OtoboConsole : uses
setup_function ..> WebserviceBuilder : uses

' Builder relationships
WebserviceBuilder *-- OperationSpec : uses
OperationSpec *-- TicketOperation : references

' Utilities
ops_util ..> TicketOperation : converts to
setup_function ..> ops_util : uses

' Config generation
setup_function ..> ClientConfig : generates

@enduml

